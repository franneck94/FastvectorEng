{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastVector This is a simple vector python package.","title":"Start"},{"location":"#fastvector","text":"This is a simple vector python package.","title":"FastVector"},{"location":"api/","text":"References Vector Class VectorND class implementation. VectorND VectorND class to perform simple vector operations. __abs__ ( self ) special Return the length (magnitude) of the vector instance. Returns: Type Description float float: Length of the vector instance. Source code in fastvector\\vector.py def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' square_sum = sum ([ val ** 2.0 for val in self . values ]) return sqrt ( square_sum ) __add__ ( self , other_vector ) special Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The additon vector of the self and the other vector instance. Source code in fastvector\\vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) add_result = [ self_val + other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( add_result ) __bool__ ( self ) special Return the truth value of the vector instance. Returns: Type Description bool bool: True, if the vector is not the Null-vector. False, else. Source code in fastvector\\vector.py def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self )) __call__ ( self ) special Callable for the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ () __eq__ ( self , other_vector ) special Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Type Description bool bool: True, if the both vector instances have the same values. False, else. Source code in fastvector\\vector.py def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , VectorND ): if self . values == other_vector . values : is_equal = True return is_equal __ge__ ( self , other , NotImplemented = NotImplemented ) special Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector\\vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result __getitem__ ( self , idx ) special Return the vector item at index idx . Parameters: Name Type Description Default idx int The vector index. required Exceptions: Type Description IndexError If an invalid index is passed in. Returns: Type Description Number Number: Vector value at index idx . Source code in fastvector\\vector.py def __getitem__ ( self , idx : int ) -> Number : '''Return the vector item at index *idx*. Args: idx (int): The vector index. Raises: IndexError: If an invalid index is passed in. Returns: Number: Vector value at index *idx*. ''' if 0 <= idx < len ( self . values ): return self . values [ idx ] else : raise IndexError ( 'Invalid index!' ) __gt__ ( self , other , NotImplemented = NotImplemented ) special Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector\\vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other __init__ ( self , * args , * , dtype = 'f' ) special Create a vector instance with the given x and y values. Parameters: Name Type Description Default args Any The vector values. () dtype Any The dtype of the underlying arry. Defaults to 'float32'. 'f' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector\\vector.py def __init__ ( self , * args : Any , dtype : Any = float32 ) -> None : '''Create a vector instance with the given x and y values. Args: args (Any): The vector values. dtype (Any): The dtype of the underlying arry. Defaults to 'float32'. Raises: TypeError: If x or y are not a number. ''' if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 0 : values = [ val for val in args ] self . values = array . array ( dtype , values ) else : raise TypeError ( 'You must pass in a tuple or list of values!' ) __le__ ( self , other , NotImplemented = NotImplemented ) special Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector\\vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other __len__ ( self ) special Return the length of the vector. Returns: Type Description int int: The vector length. Source code in fastvector\\vector.py def __len__ ( self ) -> int : '''Return the length of the vector. Returns: int: The vector length. ''' return len ( self . values ) __lt__ ( self , other_vector ) special Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description bool bool: True, if the self instance is less than the other vector instance. False, else. Source code in fastvector\\vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than __mul__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[Number, VectorND] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[Number, VectorND] Union[Number, VectorND]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __mul__ ( self , other : Union [ Number , VectorND ]) -> Union [ Number , VectorND ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[Number, VectorND]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[Number, VectorND]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , VectorND ): return sum ([ self_val * other_val for self_val , other_val in zip ( self . values , other . values )]) elif isinstance ( other , numbers . Real ): mul_result = [ val * other for val in self . values ] return VectorND ( mul_result ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' ) __repr__ ( self ) special Return the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.VectorND( { self . values } )' __setitem__ ( self , idx , val ) special Set the vector item at index idx . Parameters: Name Type Description Default idx int The vector index. required val Number The vector value to set. required Exceptions: Type Description IndexError If an invalid index is passed in. Source code in fastvector\\vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : '''Set the vector item at index *idx*. Args: idx (int): The vector index. val (Number): The vector value to set. Raises: IndexError: If an invalid index is passed in. ''' if 0 <= idx < len ( self . values ): self . values [ idx ] = val else : raise IndexError ( 'Invalid index!' ) __str__ ( self ) special The vector instance as a string. Returns: Type Description str str: The vector instance as a string. Source code in fastvector\\vector.py def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . values } )' __sub__ ( self , other_vector ) special Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The subtraction vector of the self and the other vector instance. Source code in fastvector\\vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) sub_result = [ self_val - other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( sub_result ) __truediv__ ( self , other ) special Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Number Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description VectorND Number: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __truediv__ ( self , other : Number ) -> VectorND : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: Number: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : div_result = [ val / other for val in self . values ] return VectorND ( div_result ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' ) check_vector_types ( vector ) staticmethod Check if the vector is an instance of the VectorND class. Parameters: Name Type Description Default vector object A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the VectorND class. Source code in fastvector\\vector.py @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the VectorND class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the VectorND class. ''' if not isinstance ( vector , VectorND ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"API"},{"location":"api/#references","text":"","title":"References"},{"location":"api/#vector-class","text":"","title":"Vector Class"},{"location":"api/#fastvector.vector","text":"VectorND class implementation.","title":"fastvector.vector"},{"location":"api/#fastvector.vector.VectorND","text":"VectorND class to perform simple vector operations.","title":"VectorND"},{"location":"api/#fastvector.vector.VectorND.__abs__","text":"Return the length (magnitude) of the vector instance. Returns: Type Description float float: Length of the vector instance. Source code in fastvector\\vector.py def __abs__ ( self ) -> float : '''Return the length (magnitude) of the vector instance. Returns: float: Length of the vector instance. ''' square_sum = sum ([ val ** 2.0 for val in self . values ]) return sqrt ( square_sum )","title":"__abs__()"},{"location":"api/#fastvector.vector.VectorND.__add__","text":"Returns the additon vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The additon vector of the self and the other vector instance. Source code in fastvector\\vector.py def __add__ ( self , other_vector : VectorND ) -> VectorND : '''Returns the additon vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The additon vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) add_result = [ self_val + other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( add_result )","title":"__add__()"},{"location":"api/#fastvector.vector.VectorND.__bool__","text":"Return the truth value of the vector instance. Returns: Type Description bool bool: True, if the vector is not the Null-vector. False, else. Source code in fastvector\\vector.py def __bool__ ( self ) -> bool : '''Return the truth value of the vector instance. Returns: bool: True, if the vector is not the Null-vector. False, else. ''' return bool ( abs ( self ))","title":"__bool__()"},{"location":"api/#fastvector.vector.VectorND.__call__","text":"Callable for the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __call__ ( self ) -> str : '''Callable for the vector instance representation. Returns: str: The representation of the vector instance. ''' print ( 'Calling the __call__ function!' ) return self . __repr__ ()","title":"__call__()"},{"location":"api/#fastvector.vector.VectorND.__eq__","text":"Check if the vector instances have the same values. Parameters: Name Type Description Default other_vector object Other vector instance (right-hand-side of the operator) required Returns: Type Description bool bool: True, if the both vector instances have the same values. False, else. Source code in fastvector\\vector.py def __eq__ ( self , other_vector : object ) -> bool : '''Check if the vector instances have the same values. Args: other_vector (object): Other vector instance (right-hand-side of the operator) Returns: bool: True, if the both vector instances have the same values. False, else. ''' is_equal = False if isinstance ( other_vector , VectorND ): if self . values == other_vector . values : is_equal = True return is_equal","title":"__eq__()"},{"location":"api/#fastvector.vector.VectorND.__ge__","text":"Return a >= b. Computed by @total_ordering from (not a < b). Source code in fastvector\\vector.py def _ge_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a >= b. Computed by @total_ordering from (not a < b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result","title":"__ge__()"},{"location":"api/#fastvector.vector.VectorND.__getitem__","text":"Return the vector item at index idx . Parameters: Name Type Description Default idx int The vector index. required Exceptions: Type Description IndexError If an invalid index is passed in. Returns: Type Description Number Number: Vector value at index idx . Source code in fastvector\\vector.py def __getitem__ ( self , idx : int ) -> Number : '''Return the vector item at index *idx*. Args: idx (int): The vector index. Raises: IndexError: If an invalid index is passed in. Returns: Number: Vector value at index *idx*. ''' if 0 <= idx < len ( self . values ): return self . values [ idx ] else : raise IndexError ( 'Invalid index!' )","title":"__getitem__()"},{"location":"api/#fastvector.vector.VectorND.__gt__","text":"Return a > b. Computed by @total_ordering from (not a < b) and (a != b). Source code in fastvector\\vector.py def _gt_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a > b. Computed by @total_ordering from (not a < b) and (a != b).' op_result = self . __lt__ ( other ) if op_result is NotImplemented : return op_result return not op_result and self != other","title":"__gt__()"},{"location":"api/#fastvector.vector.VectorND.__init__","text":"Create a vector instance with the given x and y values. Parameters: Name Type Description Default args Any The vector values. () dtype Any The dtype of the underlying arry. Defaults to 'float32'. 'f' Exceptions: Type Description TypeError If x or y are not a number. Source code in fastvector\\vector.py def __init__ ( self , * args : Any , dtype : Any = float32 ) -> None : '''Create a vector instance with the given x and y values. Args: args (Any): The vector values. dtype (Any): The dtype of the underlying arry. Defaults to 'float32'. Raises: TypeError: If x or y are not a number. ''' if len ( args ) == 1 and isinstance ( args [ 0 ], list ): self . values = array . array ( dtype , args [ 0 ]) elif len ( args ) > 0 : values = [ val for val in args ] self . values = array . array ( dtype , values ) else : raise TypeError ( 'You must pass in a tuple or list of values!' )","title":"__init__()"},{"location":"api/#fastvector.vector.VectorND.__le__","text":"Return a <= b. Computed by @total_ordering from (a < b) or (a == b). Source code in fastvector\\vector.py def _le_from_lt ( self , other , NotImplemented = NotImplemented ): 'Return a <= b. Computed by @total_ordering from (a < b) or (a == b).' op_result = self . __lt__ ( other ) return op_result or self == other","title":"__le__()"},{"location":"api/#fastvector.vector.VectorND.__len__","text":"Return the length of the vector. Returns: Type Description int int: The vector length. Source code in fastvector\\vector.py def __len__ ( self ) -> int : '''Return the length of the vector. Returns: int: The vector length. ''' return len ( self . values )","title":"__len__()"},{"location":"api/#fastvector.vector.VectorND.__lt__","text":"Check if the self instance is less than the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description bool bool: True, if the self instance is less than the other vector instance. False, else. Source code in fastvector\\vector.py def __lt__ ( self , other_vector : VectorND ) -> bool : '''Check if the self instance is less than the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: bool: True, if the self instance is less than the other vector instance. False, else. ''' self . check_vector_types ( other_vector ) is_less_than = False if abs ( self ) < abs ( other_vector ): is_less_than = True return is_less_than","title":"__lt__()"},{"location":"api/#fastvector.vector.VectorND.__mul__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Union[Number, VectorND] Other vector instance or scaler value (right-hand-side of the operator) required Exceptions: Type Description TypeError Not int/float passed in. Returns: Type Description Union[Number, VectorND] Union[Number, VectorND]: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __mul__ ( self , other : Union [ Number , VectorND ]) -> Union [ Number , VectorND ]: '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other (Union[Number, VectorND]): Other vector instance or scaler value (right-hand-side of the operator) Raises: TypeError: Not int/float passed in. Returns: Union[Number, VectorND]: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , VectorND ): return sum ([ self_val * other_val for self_val , other_val in zip ( self . values , other . values )]) elif isinstance ( other , numbers . Real ): mul_result = [ val * other for val in self . values ] return VectorND ( mul_result ) else : raise TypeError ( 'You must pass in a vector instance or an int/float number!' )","title":"__mul__()"},{"location":"api/#fastvector.vector.VectorND.__repr__","text":"Return the vector instance representation. Returns: Type Description str str: The representation of the vector instance. Source code in fastvector\\vector.py def __repr__ ( self ) -> str : '''Return the vector instance representation. Returns: str: The representation of the vector instance. ''' return f 'vector.VectorND( { self . values } )'","title":"__repr__()"},{"location":"api/#fastvector.vector.VectorND.__setitem__","text":"Set the vector item at index idx . Parameters: Name Type Description Default idx int The vector index. required val Number The vector value to set. required Exceptions: Type Description IndexError If an invalid index is passed in. Source code in fastvector\\vector.py def __setitem__ ( self , idx : int , val : Number ) -> None : '''Set the vector item at index *idx*. Args: idx (int): The vector index. val (Number): The vector value to set. Raises: IndexError: If an invalid index is passed in. ''' if 0 <= idx < len ( self . values ): self . values [ idx ] = val else : raise IndexError ( 'Invalid index!' )","title":"__setitem__()"},{"location":"api/#fastvector.vector.VectorND.__str__","text":"The vector instance as a string. Returns: Type Description str str: The vector instance as a string. Source code in fastvector\\vector.py def __str__ ( self ) -> str : '''The vector instance as a string. Returns: str: The vector instance as a string. ''' return f '( { self . values } )'","title":"__str__()"},{"location":"api/#fastvector.vector.VectorND.__sub__","text":"Return the subtraction vector of the self and the other vector instance. Parameters: Name Type Description Default other_vector VectorND Other vector instance (right-hand-side of the operator). required Returns: Type Description VectorND VectorND: The subtraction vector of the self and the other vector instance. Source code in fastvector\\vector.py def __sub__ ( self , other_vector : VectorND ) -> VectorND : '''Return the subtraction vector of the self and the other vector instance. Args: other_vector (VectorND): Other vector instance (right-hand-side of the operator). Returns: VectorND: The subtraction vector of the self and the other vector instance. ''' self . check_vector_types ( other_vector ) sub_result = [ self_val - other_val for self_val , other_val in zip ( self . values , other_vector . values )] return VectorND ( sub_result )","title":"__sub__()"},{"location":"api/#fastvector.vector.VectorND.__truediv__","text":"Return the multiplication of the self vector and the other vector(or number) instance. Parameters: Name Type Description Default other Number Other vector instance or scaler value (right-hand-side of the operator). required Exceptions: Type Description ValueError Division by zero. TypeError Not int/float passed in. Returns: Type Description VectorND Number: The multiplication of the self vector and the other vector(or number) instance. Source code in fastvector\\vector.py def __truediv__ ( self , other : Number ) -> VectorND : '''Return the multiplication of the self vector and the other vector(or number) instance. Args: other: Other vector instance or scaler value (right-hand-side of the operator). Raises: ValueError: Division by zero. TypeError: Not int/float passed in. Returns: Number: The multiplication of the self vector and the other vector(or number) instance. ''' if isinstance ( other , numbers . Real ): if other != 0.0 : div_result = [ val / other for val in self . values ] return VectorND ( div_result ) else : raise ValueError ( 'You cannot divide by zero!' ) else : raise TypeError ( 'You must pass in an int/float value!' )","title":"__truediv__()"},{"location":"api/#fastvector.vector.VectorND.check_vector_types","text":"Check if the vector is an instance of the VectorND class. Parameters: Name Type Description Default vector object A vector instance. required Exceptions: Type Description TypeError If vector is not an instance of the VectorND class. Source code in fastvector\\vector.py @staticmethod def check_vector_types ( vector : object ) -> None : '''Check if the vector is an instance of the VectorND class. Args: vector (object): A vector instance. Raises: TypeError: If vector is not an instance of the VectorND class. ''' if not isinstance ( vector , VectorND ): raise TypeError ( 'You have to pass in two instances of the vector class!' )","title":"check_vector_types()"}]}